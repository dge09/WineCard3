@page "/pwine"
@using WineCard3.MyDB.Enities
@using WineCard3.MyDB.Services
@rendermode InteractiveServer

<PageTitle>PWine</PageTitle>

<h1>Weine:</h1>


<dialog open="@ShowCRUDModal" @onclose="ToggleCRUDModal">
    <div>
        <label>Weinname:</label>
        <InputText @bind-Value="selectedWine.WineName"></InputText>
    </div>
    <div>
        <label>Style:</label>
        <InputText @bind-Value="selectedWine.Style.StyleDscp"></InputText>
    </div>
    <div>
        <label>Süße:</label>
        <InputNumber @bind-Value="selectedWine.SweetnessLevel"></InputNumber>
    </div>
    <div>
        <label>Jahrgang:</label>
        <InputNumber @bind-Value="selectedWine.Year"></InputNumber>
    </div>
    <div>
        <label>Bewertung:</label>
        <InputNumber @bind-Value="selectedWine.Rating"></InputNumber>
    </div>
    <div>
        <label>Herkunft:</label>
        <InputText @bind-Value="selectedWine.Origin.OriginName"></InputText>
    </div>
    <div>
        <button @onclick="AddOrUpdateAsync">@ToDo</button>
        <button @onclick="DeleteAsync">Delete</button>
    </div>
</dialog>
@if(Wines != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>WineName</th>
                <th>StyleID</th>
                <th>SweetnessLevel</th>
                <th>Year</th>
                <th>Rating</th>
                <th>Price</th>
                <th>OriginID</th>
                <th>Bearbeiten</th>
                <th>Löschen</th>
            </tr>
        </thead>
        <tbody>
            @if (Wines.Count() > 0)
            {
                @foreach (Wine wine in Wines)
                {
                    <tr>
                        <td>@wine.WineName</td>
                        <td>@wine.Style.StyleDscp</td>
                        <td>@wine.SweetnessLevel</td>
                        <td>@wine.Year</td>
                        <td>@wine.Rating</td>
                        <td>@wine.Price</td>
                        <td>@wine.Origin.OriginName</td>
                        <td>
                            <button @onclick="() => ToggleUpdateModal(wine)">Bearbeiten</button>
                        </td>
                        <td>
                            <button @onclick="() => ToggleDeleteModal(wine.ID)">Löschen</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <button @onclick="() => ToggleAddModal()">Hinzufügen</button>
}
else
{
    <div>
        <label>Loading</label>
    </div>
}


@code {
    private List<Wine> Wines = new();
    private List<Origin> Origins = new();
    private List<Style> Styles = new();
    private List<Card> Cards = new();

    private Wine selectedWine = new();
    private bool ShowCRUDModal = false;
    private string ToDo = string.Empty;

    // WineName
    // StyleID
    // SweetnessLevel
    // Year
    // Rating
    // Price
    // OriginID

    protected override async Task OnInitializedAsync()
    {
        List<Origin> origins = await MySer.originServices.GetAllAsync();
        List<Style> styles = await MySer.styleServices.GetAllAsync();
        List<Wine> wines = await MySer.wineServices.GetAllAsync();
        List<Card> cards = await MySer.cardServices.GetAllAsync();
        await base.OnInitializedAsync();
    }


    private void ToggleCRUDModal()
    {
        ShowCRUDModal = !ShowCRUDModal;
    }

    private async Task AddOrUpdateAsync()
    {
        await UpdateLists();

        if (!Styles.Exists(x => x.StyleDscp == selectedWine.Style.StyleDscp))
        {
            await MySer.wineServices.CreateAsync(selectedWine);
        }

        if (!Origins.Exists(x => x.OriginName == selectedWine.Origin.OriginName))
        {
            await MySer.wineServices.CreateAsync(selectedWine);
        }

        if (MySer.csvServices.WineExistanceInList(Wines, selectedWine))
        {
            //update
            await MySer.wineServices.UpdateAsync(selectedWine);
        }
        else
        {
            //create
            await MySer.wineServices.CreateAsync(selectedWine);
        }

        await UpdateLists();
    }

    private async Task DeleteAsync()
    {
        await MySer.wineServices.DeleteAsync(selectedWine);
    }

    private void ToggleAddModal()
    {
        ShowCRUDModal = true;
    }

    private void ToggleUpdateModal(Wine w)
    {
        selectedWine = w;
        ShowCRUDModal = true;
    }

    private void ToggleDeleteModal(int ID)
    {
        selectedWine = Wines.Where(x => x.ID == ID).FirstOrDefault();
        ShowCRUDModal = true;
    }

    private async Task UpdateLists()
    {
        Styles = await MySer.styleServices.GetAllAsync();
        Origins = await MySer.originServices.GetAllAsync();
        Wines = await MySer.wineServices.GetAllAsync();
    }
}